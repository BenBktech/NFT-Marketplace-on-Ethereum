{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NFTMarketplace__ListingPriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketplace__NotNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketplace__NotTheOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketplace__PriceIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMarketplace__SalePriceNotMet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        }
      ],
      "name": "NFTItemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchItemsListed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NFTMarketplace.NFT[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchMyNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NFTMarketplace.NFT[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NFTMarketplace.NFT[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "resellNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_listingPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListingPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d6fd0f06e6dc08ff5a4b8341d24a11c7b66af72b929fd074823bf88caafdd83",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3539947",
    "logsBloom": "0x
    "blockHash": "0x8308c4c5950ae52a8cdd3c652e707d36f729e959db193e665b432c635aed2210",
    "transactionHash": "0x4d6fd0f06e6dc08ff5a4b8341d24a11c7b66af72b929fd074823bf88caafdd83",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3539947",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "af9fa10e77785db8c68497cb56642592",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTMarketplace__ListingPriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketplace__NotNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketplace__NotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketplace__PriceIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMarketplace__SalePriceNotMet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"name\":\"NFTItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchItemsListed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NFTMarketplace.NFT[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMyNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NFTMarketplace.NFT[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NFTMarketplace.NFT[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"resellNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingPrice\",\"type\":\"uint256\"}],\"name\":\"updateListingPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"buy(uint256)\":{\"params\":{\"nftId\":\"The Id of the NFT\"}},\"createNFT(string,uint256)\":{\"params\":{\"price\":\"The price of the NFT\",\"tokenURI\":\"The TokenURI of the NFT\"},\"returns\":{\"_0\":\"newNFTId The id of the NFT\"}},\"fetchItemsListed()\":{\"returns\":{\"_0\":\"All the items a user has listed\"}},\"fetchMyNFTs()\":{\"returns\":{\"_0\":\"Returns all the items that a user has purchased\"}},\"fetchNFTs()\":{\"returns\":{\"_0\":\"All the unsold market items\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getListingPrice()\":{\"returns\":{\"_0\":\"listingPrice The listing price\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"resellNFT(uint256,uint256)\":{\"params\":{\"nftId\":\"The Id of the NFT \",\"price\":\"The new Price of the NFT\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateListingPrice(uint256)\":{\"params\":{\"_listingPrice\":\"The new listing price\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buy(uint256)\":{\"notice\":\"Allows a user to buy an NFT that is on the Marketplace\"},\"createNFT(string,uint256)\":{\"notice\":\"Mints a NFT and lists it in the marketplace \"},\"fetchItemsListed()\":{\"notice\":\"Returns only items a user has listed \"},\"fetchMyNFTs()\":{\"notice\":\"Returns only items that a user has purchased\"},\"fetchNFTs()\":{\"notice\":\"Returns all unsold market items, all the items that are currently beeing sold\"},\"getListingPrice()\":{\"notice\":\"Returns the listing price of the contract \"},\"resellNFT(uint256,uint256)\":{\"notice\":\"Allows someone to resell a NFT they have purchased\"},\"updateListingPrice(uint256)\":{\"notice\":\"Updates the listing price of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketplace.sol\":\"NFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @title NFT Marketplace\\r\\n/// @author Ben BK\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\nerror NFTMarketplace__NotTheOwner();\\r\\nerror NFTMarketplace__PriceIsNull();\\r\\nerror NFTMarketplace__ListingPriceNotMet();\\r\\nerror NFTMarketplace__NotNftOwner();\\r\\nerror NFTMarketplace__SalePriceNotMet();\\r\\n\\r\\ncontract NFTMarketplace is ERC721URIStorage {\\r\\n    // We need to keep track of the last nft Id\\r\\n    uint private _nftIds;\\r\\n    // The number of items that are currently on sale\\r\\n    uint private _nftsSold;\\r\\n\\r\\n    // Fee given to the owner of the smart contract for each sale\\r\\n    uint256 listingPrice = 0.0025 ether;\\r\\n    address payable owner;\\r\\n\\r\\n    mapping(uint256 => NFT) private idToNFT;\\r\\n\\r\\n    struct NFT {\\r\\n      uint256 nftId;\\r\\n      address payable seller;\\r\\n      address payable owner;\\r\\n      uint256 price;\\r\\n      bool sold;\\r\\n    }\\r\\n\\r\\n    event NFTItemCreated (\\r\\n      uint256 indexed nftId,\\r\\n      address seller,\\r\\n      address owner,\\r\\n      uint256 price,\\r\\n      bool sold\\r\\n    );\\r\\n\\r\\n    constructor() ERC721(\\\"Ben BK NFT Marketplace\\\", \\\"BBKNFTM\\\") {\\r\\n      owner = payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the listing price of the contract\\r\\n    /// @param _listingPrice The new listing price\\r\\n    function updateListingPrice(uint _listingPrice) public payable {\\r\\n      if(owner != msg.sender) {\\r\\n        revert NFTMarketplace__NotTheOwner();\\r\\n      }\\r\\n      listingPrice = _listingPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the listing price of the contract \\r\\n    /// @return listingPrice The listing price\\r\\n    function getListingPrice() public view returns (uint256) {\\r\\n      return listingPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Mints a NFT and lists it in the marketplace \\r\\n    /// @param tokenURI The TokenURI of the NFT\\r\\n    /// @param price The price of the NFT\\r\\n    /// @return newNFTId The id of the NFT\\r\\n    function createNFT(string memory tokenURI, uint256 price) public payable returns (uint) {\\r\\n      _nftIds = _nftIds + 1;\\r\\n      uint256 newNFTId = _nftIds;\\r\\n\\r\\n      _mint(msg.sender, newNFTId);\\r\\n      _setTokenURI(newNFTId, tokenURI);\\r\\n      createNFTItem(newNFTId, price);\\r\\n      return newNFTId;\\r\\n    }\\r\\n\\r\\n    /// @notice List a new NFT on the Marketplace\\r\\n    /// @param nftId The id of the NFT\\r\\n    /// @param price The price of the NFT\\r\\n    function createNFTItem(\\r\\n      uint256 nftId,\\r\\n      uint256 price\\r\\n    ) private {\\r\\n      if(price <= 0) {\\r\\n        revert NFTMarketplace__PriceIsNull();\\r\\n      }\\r\\n      if(msg.value != listingPrice) {\\r\\n        revert NFTMarketplace__ListingPriceNotMet();\\r\\n      }\\r\\n\\r\\n      idToNFT[nftId] =  NFT(\\r\\n        nftId,\\r\\n        payable(msg.sender),\\r\\n        payable(address(this)),\\r\\n        price,\\r\\n        false\\r\\n      );\\r\\n\\r\\n      _transfer(msg.sender, address(this), nftId);\\r\\n      emit NFTItemCreated(\\r\\n        nftId,\\r\\n        msg.sender,\\r\\n        address(this),\\r\\n        price,\\r\\n        false\\r\\n      );\\r\\n    }\\r\\n\\r\\n    /// @notice Allows someone to resell a NFT they have purchased\\r\\n    /// @param nftId The Id of the NFT \\r\\n    /// @param price The new Price of the NFT\\r\\n    function resellNFT(uint256 nftId, uint256 price) public payable {\\r\\n      if(idToNFT[nftId].owner != msg.sender) {\\r\\n        revert NFTMarketplace__NotNftOwner();\\r\\n      }\\r\\n      if(msg.value != listingPrice) {\\r\\n        revert NFTMarketplace__ListingPriceNotMet();\\r\\n      }\\r\\n      idToNFT[nftId].sold = false;\\r\\n      idToNFT[nftId].price = price;\\r\\n      idToNFT[nftId].seller = payable(msg.sender);\\r\\n      idToNFT[nftId].owner = payable(address(this));\\r\\n      _nftsSold--;\\r\\n\\r\\n      _transfer(msg.sender, address(this), nftId);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows a user to buy an NFT that is on the Marketplace\\r\\n    /// @param nftId The Id of the NFT\\r\\n    function buy(uint256 nftId) public payable {\\r\\n      uint price = idToNFT[nftId].price;\\r\\n      address seller = idToNFT[nftId].seller;\\r\\n      if(msg.value != price) {\\r\\n        revert NFTMarketplace__SalePriceNotMet();\\r\\n      }\\r\\n      \\r\\n      idToNFT[nftId].owner = payable(msg.sender);\\r\\n      idToNFT[nftId].sold = true;\\r\\n      idToNFT[nftId].seller = payable(address(0));\\r\\n      _nftsSold++;\\r\\n      _transfer(address(this), msg.sender, nftId);\\r\\n      payable(owner).transfer(listingPrice);\\r\\n      payable(seller).transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns all unsold market items, all the items that are currently beeing sold\\r\\n    /// @return All the unsold market items\\r\\n    function fetchNFTs() public view returns (NFT[] memory) {\\r\\n      uint nftCount = _nftIds;\\r\\n      uint unsoldNFTCount = _nftIds - _nftsSold;\\r\\n      uint currentIndex = 0;\\r\\n\\r\\n      NFT[] memory nfts = new NFT[](unsoldNFTCount);\\r\\n      for (uint i = 0; i < nftCount; i++) {\\r\\n        if (idToNFT[i + 1].owner == address(this)) {\\r\\n          uint currentId = i + 1;\\r\\n          NFT storage currentItem = idToNFT[currentId];\\r\\n          nfts[currentIndex] = currentItem;\\r\\n          currentIndex += 1;\\r\\n        }\\r\\n      }\\r\\n      return nfts;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns only items that a user has purchased\\r\\n    /// @return Returns all the items that a user has purchased\\r\\n    function fetchMyNFTs() public view returns (NFT[] memory) {\\r\\n      uint totalNFTCount = _nftIds;\\r\\n      uint nftCount = 0;\\r\\n      uint currentIndex = 0;\\r\\n\\r\\n      for (uint i = 0; i < totalNFTCount; i++) {\\r\\n        if (idToNFT[i + 1].owner == msg.sender) {\\r\\n          nftCount += 1;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      NFT[] memory nfts = new NFT[](nftCount);\\r\\n      for (uint i = 0; i < totalNFTCount; i++) {\\r\\n        if (idToNFT[i + 1].owner == msg.sender) {\\r\\n          uint currentId = i + 1;\\r\\n          NFT storage currentItem = idToNFT[currentId];\\r\\n          nfts[currentIndex] = currentItem;\\r\\n          currentIndex += 1;\\r\\n        }\\r\\n      }\\r\\n      return nfts;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns only items a user has listed \\r\\n    /// @return All the items a user has listed\\r\\n    function fetchItemsListed() public view returns (NFT[] memory) {\\r\\n      uint totalNFTCount = _nftIds;\\r\\n      uint nftCount = 0;\\r\\n      uint currentIndex = 0;\\r\\n\\r\\n      for (uint i = 0; i < totalNFTCount; i++) {\\r\\n        if (idToNFT[i + 1].seller == msg.sender) {\\r\\n          nftCount += 1;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      NFT[] memory nfts = new NFT[](nftCount);\\r\\n      for (uint i = 0; i < totalNFTCount; i++) {\\r\\n        if (idToNFT[i + 1].seller == msg.sender) {\\r\\n          uint currentId = i + 1;\\r\\n          NFT storage currentItem = idToNFT[currentId];\\r\\n          nfts[currentIndex] = currentItem;\\r\\n          currentIndex += 1;\\r\\n        }\\r\\n      }\\r\\n      return nfts;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x257e5bd88aa56974226f13988dac07cb49b03bc979b99704daff806c566af52a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526608e1bc9bf040006009553480156200001c57600080fd5b506040518060400160405280601681526020017f42656e20424b204e4654204d61726b6574706c616365000000000000000000008152506040518060400160405280600781526020017f42424b4e46544d0000000000000000000000000000000000000000000000000081525081600090816200009a919062000370565b508060019081620000ac919062000370565b50505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000457565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200017857607f821691505b6020821081036200018e576200018d62000130565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001b9565b620002048683620001b9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002516200024b62000245846200021c565b62000226565b6200021c565b9050919050565b6000819050919050565b6200026d8362000230565b620002856200027c8262000258565b848454620001c6565b825550505050565b600090565b6200029c6200028d565b620002a981848462000262565b505050565b5b81811015620002d157620002c560008262000292565b600181019050620002af565b5050565b601f8211156200032057620002ea8162000194565b620002f584620001a9565b8101602085101562000305578190505b6200031d6200031485620001a9565b830182620002ae565b50505b505050565b600082821c905092915050565b6000620003456000198460080262000325565b1980831691505092915050565b600062000360838362000332565b9150826002028217905092915050565b6200037b82620000f6565b67ffffffffffffffff81111562000397576200039662000101565b5b620003a382546200015f565b620003b0828285620002d5565b600060209050601f831160018114620003e85760008415620003d3578287015190505b620003df858262000352565b8655506200044f565b601f198416620003f88662000194565b60005b828110156200042257848901518255600182019150602085019450602081019050620003fb565b868310156200044257848901516200043e601f89168262000332565b8355505b6001600288020188555050505b505050505050565b613d6a80620004676000396000f3fe60806040526004361061012a5760003560e01c80636352211e116100ab578063ac3dfc731161006f578063ac3dfc73146103f9578063ae677aa314610415578063b88d4fde14610431578063c87b56dd1461045a578063d96a094a14610497578063e985e9c5146104b35761012a565b80636352211e1461030057806370a082311461033d57806378f04baf1461037a57806395d89b41146103a5578063a22cb465146103d05761012a565b8063202e3740116100f2578063202e37401461022857806323b872dd14610253578063268291551461027c57806342842e0e146102ac57806345f8fa80146102d55761012a565b806301ffc9a71461012f57806306fdde031461016c578063081812fc14610197578063095ea7b3146101d457806312e85585146101fd575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906128c3565b6104f0565b604051610163919061290b565b60405180910390f35b34801561017857600080fd5b506101816105d2565b60405161018e91906129b6565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190612a0e565b610664565b6040516101cb9190612a7c565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612ac3565b6106aa565b005b34801561020957600080fd5b506102126107c1565b60405161021f9190612b12565b60405180910390f35b34801561023457600080fd5b5061023d6107cb565b60405161024a9190612c83565b60405180910390f35b34801561025f57600080fd5b5061027a60048036038101906102759190612ca5565b610ab0565b005b61029660048036038101906102919190612e2d565b610b10565b6040516102a39190612b12565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190612ca5565b610b56565b005b3480156102e157600080fd5b506102ea610b76565b6040516102f79190612c83565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190612a0e565b610e5b565b6040516103349190612a7c565b60405180910390f35b34801561034957600080fd5b50610364600480360381019061035f9190612e89565b610f0c565b6040516103719190612b12565b60405180910390f35b34801561038657600080fd5b5061038f610fc3565b60405161039c9190612c83565b60405180910390f35b3480156103b157600080fd5b506103ba611216565b6040516103c791906129b6565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190612ee2565b6112a8565b005b610413600480360381019061040e9190612f22565b6112be565b005b61042f600480360381019061042a9190612a0e565b6114af565b005b34801561043d57600080fd5b5061045860048036038101906104539190613003565b611540565b005b34801561046657600080fd5b50610481600480360381019061047c9190612a0e565b6115a2565b60405161048e91906129b6565b60405180910390f35b6104b160048036038101906104ac9190612a0e565b6116b4565b005b3480156104bf57600080fd5b506104da60048036038101906104d59190613086565b6118f7565b6040516104e7919061290b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105bb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105cb57506105ca8261198b565b5b9050919050565b6060600080546105e1906130f5565b80601f016020809104026020016040519081016040528092919081815260200182805461060d906130f5565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b5050505050905090565b600061066f826119f5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106b582610e5b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90613198565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610744611a40565b73ffffffffffffffffffffffffffffffffffffffff16148061077357506107728161076d611a40565b6118f7565b5b6107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061322a565b60405180910390fd5b6107bc8383611a48565b505050565b6000600954905090565b60606000600754905060008060005b8381101561087a573373ffffffffffffffffffffffffffffffffffffffff16600b600060018461080a9190613279565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610867576001836108649190613279565b92505b8080610872906132ad565b9150506107da565b5060008267ffffffffffffffff81111561089757610896612d02565b5b6040519080825280602002602001820160405280156108d057816020015b6108bd6127fa565b8152602001906001900390816108b55790505b50905060005b84811015610aa5573373ffffffffffffffffffffffffffffffffffffffff16600b60006001846109069190613279565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a925760006001826109629190613279565b90506000600b60008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050848681518110610a7557610a746132f5565b5b6020026020010181905250600185610a8d9190613279565b945050505b8080610a9d906132ad565b9150506108d6565b508094505050505090565b610ac1610abb611a40565b82611b01565b610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af790613396565b60405180910390fd5b610b0b838383611b96565b505050565b60006001600754610b219190613279565b60078190555060006007549050610b383382611dfc565b610b428185611fd5565b610b4c8184612042565b8091505092915050565b610b7183838360405180602001604052806000815250611540565b505050565b60606000600754905060008060005b83811015610c25573373ffffffffffffffffffffffffffffffffffffffff16600b6000600184610bb59190613279565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610c1257600183610c0f9190613279565b92505b8080610c1d906132ad565b915050610b85565b5060008267ffffffffffffffff811115610c4257610c41612d02565b5b604051908082528060200260200182016040528015610c7b57816020015b610c686127fa565b815260200190600190039081610c605790505b50905060005b84811015610e50573373ffffffffffffffffffffffffffffffffffffffff16600b6000600184610cb19190613279565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e3d576000600182610d0d9190613279565b90506000600b60008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050848681518110610e2057610e1f6132f5565b5b6020026020010181905250600185610e389190613279565b945050505b8080610e48906132ad565b915050610c81565b508094505050505090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa90613402565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390613494565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600060075490506000600854600754610fde91906134b4565b90506000808267ffffffffffffffff811115610ffd57610ffc612d02565b5b60405190808252806020026020018201604052801561103657816020015b6110236127fa565b81526020019060019003908161101b5790505b50905060005b8481101561120b573073ffffffffffffffffffffffffffffffffffffffff16600b600060018461106c9190613279565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111f85760006001826110c89190613279565b90506000600b60008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250508486815181106111db576111da6132f5565b5b60200260200101819052506001856111f39190613279565b945050505b8080611203906132ad565b91505061103c565b508094505050505090565b606060018054611225906130f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611251906130f5565b801561129e5780601f106112735761010080835404028352916020019161129e565b820191906000526020600020905b81548152906001019060200180831161128157829003601f168201915b5050505050905090565b6112ba6112b3611a40565b8383612233565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600b600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611359576040517f8c02c9f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009543414611394576040517fd17a945f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b600084815260200190815260200160002060040160006101000a81548160ff02191690831515021790555080600b60008481526020019081526020016000206003018190555033600b600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555030600b600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600081548092919061149b906134e8565b91905055506114ab333084611b96565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611536576040517f3938a73800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060098190555050565b61155161154b611a40565b83611b01565b611590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158790613396565b60405180910390fd5b61159c8484848461239f565b50505050565b60606115ad826119f5565b60006006600084815260200190815260200160002080546115cd906130f5565b80601f01602080910402602001604051908101604052809291908181526020018280546115f9906130f5565b80156116465780601f1061161b57610100808354040283529160200191611646565b820191906000526020600020905b81548152906001019060200180831161162957829003601f168201915b5050505050905060006116576123fb565b9050600081510361166c5781925050506116af565b6000825111156116a157808260405160200161168992919061354d565b604051602081830303815290604052925050506116af565b6116aa84612412565b925050505b919050565b6000600b60008381526020019081526020016000206003015490506000600b600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050813414611743576040517fb7793d3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600b600085815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b600085815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600b600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060086000815480929190611830906132ad565b9190505550611840303385611b96565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6009549081150290604051600060405180830381858888f193505050501580156118aa573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156118f1573d6000803e3d6000fd5b50505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6119fe8161247a565b611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3490613402565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611abb83610e5b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611b0d83610e5b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b4f5750611b4e81856118f7565b5b80611b8d57508373ffffffffffffffffffffffffffffffffffffffff16611b7584610664565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611bb682610e5b565b73ffffffffffffffffffffffffffffffffffffffff1614611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c03906135e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7290613675565b60405180910390fd5b611c868383836124e6565b611c91600082611a48565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ce191906134b4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d389190613279565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611df78383836124eb565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e62906136e1565b60405180910390fd5b611e748161247a565b15611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab9061374d565b60405180910390fd5b611ec0600083836124e6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f109190613279565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fd1600083836124eb565b5050565b611fde8261247a565b61201d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612014906137df565b60405180910390fd5b8060066000848152602001908152602001600020908161203d91906139ab565b505050565b6000811161207c576040517fa05bd3b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60095434146120b7576040517fd17a945f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200182815260200160001515815250600b60008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050506121f0333084611b96565b817f996e8605a17a03b804e9be32760ca54c8ff26dfc111d8ee2a0e96806d5e5890633308460006040516122279493929190613a7d565b60405180910390a25050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036122a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229890613b0e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612392919061290b565b60405180910390a3505050565b6123aa848484611b96565b6123b6848484846124f0565b6123f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ec90613ba0565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061241d826119f5565b60006124276123fb565b905060008151116124475760405180602001604052806000815250612472565b8061245184612677565b60405160200161246292919061354d565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006125118473ffffffffffffffffffffffffffffffffffffffff166127d7565b1561266a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261253a611a40565b8786866040518563ffffffff1660e01b815260040161255c9493929190613c15565b6020604051808303816000875af192505050801561259857506040513d601f19601f820116820180604052508101906125959190613c76565b60015b61261a573d80600081146125c8576040519150601f19603f3d011682016040523d82523d6000602084013e6125cd565b606091505b506000815103612612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260990613ba0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061266f565b600190505b949350505050565b6060600082036126be576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506127d2565b600082905060005b600082146126f05780806126d9906132ad565b915050600a826126e99190613cd2565b91506126c6565b60008167ffffffffffffffff81111561270c5761270b612d02565b5b6040519080825280601f01601f19166020018201604052801561273e5781602001600182028036833780820191505090505b5090505b600085146127cb5760018261275791906134b4565b9150600a856127669190613d03565b60306127729190613279565b60f81b818381518110612788576127876132f5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127c49190613cd2565b9450612742565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6128a08161286b565b81146128ab57600080fd5b50565b6000813590506128bd81612897565b92915050565b6000602082840312156128d9576128d8612861565b5b60006128e7848285016128ae565b91505092915050565b60008115159050919050565b612905816128f0565b82525050565b600060208201905061292060008301846128fc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612960578082015181840152602081019050612945565b60008484015250505050565b6000601f19601f8301169050919050565b600061298882612926565b6129928185612931565b93506129a2818560208601612942565b6129ab8161296c565b840191505092915050565b600060208201905081810360008301526129d0818461297d565b905092915050565b6000819050919050565b6129eb816129d8565b81146129f657600080fd5b50565b600081359050612a08816129e2565b92915050565b600060208284031215612a2457612a23612861565b5b6000612a32848285016129f9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a6682612a3b565b9050919050565b612a7681612a5b565b82525050565b6000602082019050612a916000830184612a6d565b92915050565b612aa081612a5b565b8114612aab57600080fd5b50565b600081359050612abd81612a97565b92915050565b60008060408385031215612ada57612ad9612861565b5b6000612ae885828601612aae565b9250506020612af9858286016129f9565b9150509250929050565b612b0c816129d8565b82525050565b6000602082019050612b276000830184612b03565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b62816129d8565b82525050565b6000612b7382612a3b565b9050919050565b612b8381612b68565b82525050565b612b92816128f0565b82525050565b60a082016000820151612bae6000850182612b59565b506020820151612bc16020850182612b7a565b506040820151612bd46040850182612b7a565b506060820151612be76060850182612b59565b506080820151612bfa6080850182612b89565b50505050565b6000612c0c8383612b98565b60a08301905092915050565b6000602082019050919050565b6000612c3082612b2d565b612c3a8185612b38565b9350612c4583612b49565b8060005b83811015612c76578151612c5d8882612c00565b9750612c6883612c18565b925050600181019050612c49565b5085935050505092915050565b60006020820190508181036000830152612c9d8184612c25565b905092915050565b600080600060608486031215612cbe57612cbd612861565b5b6000612ccc86828701612aae565b9350506020612cdd86828701612aae565b9250506040612cee868287016129f9565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d3a8261296c565b810181811067ffffffffffffffff82111715612d5957612d58612d02565b5b80604052505050565b6000612d6c612857565b9050612d788282612d31565b919050565b600067ffffffffffffffff821115612d9857612d97612d02565b5b612da18261296c565b9050602081019050919050565b82818337600083830152505050565b6000612dd0612dcb84612d7d565b612d62565b905082815260208101848484011115612dec57612deb612cfd565b5b612df7848285612dae565b509392505050565b600082601f830112612e1457612e13612cf8565b5b8135612e24848260208601612dbd565b91505092915050565b60008060408385031215612e4457612e43612861565b5b600083013567ffffffffffffffff811115612e6257612e61612866565b5b612e6e85828601612dff565b9250506020612e7f858286016129f9565b9150509250929050565b600060208284031215612e9f57612e9e612861565b5b6000612ead84828501612aae565b91505092915050565b612ebf816128f0565b8114612eca57600080fd5b50565b600081359050612edc81612eb6565b92915050565b60008060408385031215612ef957612ef8612861565b5b6000612f0785828601612aae565b9250506020612f1885828601612ecd565b9150509250929050565b60008060408385031215612f3957612f38612861565b5b6000612f47858286016129f9565b9250506020612f58858286016129f9565b9150509250929050565b600067ffffffffffffffff821115612f7d57612f7c612d02565b5b612f868261296c565b9050602081019050919050565b6000612fa6612fa184612f62565b612d62565b905082815260208101848484011115612fc257612fc1612cfd565b5b612fcd848285612dae565b509392505050565b600082601f830112612fea57612fe9612cf8565b5b8135612ffa848260208601612f93565b91505092915050565b6000806000806080858703121561301d5761301c612861565b5b600061302b87828801612aae565b945050602061303c87828801612aae565b935050604061304d878288016129f9565b925050606085013567ffffffffffffffff81111561306e5761306d612866565b5b61307a87828801612fd5565b91505092959194509250565b6000806040838503121561309d5761309c612861565b5b60006130ab85828601612aae565b92505060206130bc85828601612aae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061310d57607f821691505b6020821081036131205761311f6130c6565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613182602183612931565b915061318d82613126565b604082019050919050565b600060208201905081810360008301526131b181613175565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000613214603e83612931565b915061321f826131b8565b604082019050919050565b6000602082019050818103600083015261324381613207565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613284826129d8565b915061328f836129d8565b92508282019050808211156132a7576132a661324a565b5b92915050565b60006132b8826129d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132ea576132e961324a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613380602e83612931565b915061338b82613324565b604082019050919050565b600060208201905081810360008301526133af81613373565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006133ec601883612931565b91506133f7826133b6565b602082019050919050565b6000602082019050818103600083015261341b816133df565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061347e602983612931565b915061348982613422565b604082019050919050565b600060208201905081810360008301526134ad81613471565b9050919050565b60006134bf826129d8565b91506134ca836129d8565b92508282039050818111156134e2576134e161324a565b5b92915050565b60006134f3826129d8565b9150600082036135065761350561324a565b5b600182039050919050565b600081905092915050565b600061352782612926565b6135318185613511565b9350613541818560208601612942565b80840191505092915050565b6000613559828561351c565b9150613565828461351c565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006135cd602583612931565b91506135d882613571565b604082019050919050565b600060208201905081810360008301526135fc816135c0565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061365f602483612931565b915061366a82613603565b604082019050919050565b6000602082019050818103600083015261368e81613652565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006136cb602083612931565b91506136d682613695565b602082019050919050565b600060208201905081810360008301526136fa816136be565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613737601c83612931565b915061374282613701565b602082019050919050565b600060208201905081810360008301526137668161372a565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006137c9602e83612931565b91506137d48261376d565b604082019050919050565b600060208201905081810360008301526137f8816137bc565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613824565b61386b8683613824565b95508019841693508086168417925050509392505050565b6000819050919050565b60006138a86138a361389e846129d8565b613883565b6129d8565b9050919050565b6000819050919050565b6138c28361388d565b6138d66138ce826138af565b848454613831565b825550505050565b600090565b6138eb6138de565b6138f68184846138b9565b505050565b5b8181101561391a5761390f6000826138e3565b6001810190506138fc565b5050565b601f82111561395f57613930816137ff565b61393984613814565b81016020851015613948578190505b61395c61395485613814565b8301826138fb565b50505b505050565b600082821c905092915050565b600061398260001984600802613964565b1980831691505092915050565b600061399b8383613971565b9150826002028217905092915050565b6139b482612926565b67ffffffffffffffff8111156139cd576139cc612d02565b5b6139d782546130f5565b6139e282828561391e565b600060209050601f831160018114613a155760008415613a03578287015190505b613a0d858261398f565b865550613a75565b601f198416613a23866137ff565b60005b82811015613a4b57848901518255600182019150602085019450602081019050613a26565b86831015613a685784890151613a64601f891682613971565b8355505b6001600288020188555050505b505050505050565b6000608082019050613a926000830187612a6d565b613a9f6020830186612a6d565b613aac6040830185612b03565b613ab960608301846128fc565b95945050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613af8601983612931565b9150613b0382613ac2565b602082019050919050565b60006020820190508181036000830152613b2781613aeb565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613b8a603283612931565b9150613b9582613b2e565b604082019050919050565b60006020820190508181036000830152613bb981613b7d565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613be782613bc0565b613bf18185613bcb565b9350613c01818560208601612942565b613c0a8161296c565b840191505092915050565b6000608082019050613c2a6000830187612a6d565b613c376020830186612a6d565b613c446040830185612b03565b8181036060830152613c568184613bdc565b905095945050505050565b600081519050613c7081612897565b92915050565b600060208284031215613c8c57613c8b612861565b5b6000613c9a84828501613c61565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613cdd826129d8565b9150613ce8836129d8565b925082613cf857613cf7613ca3565b5b828204905092915050565b6000613d0e826129d8565b9150613d19836129d8565b925082613d2957613d28613ca3565b5b82820690509291505056fea2646970667358221220c4fb3d942c1d0f877381d75d61f895a50b2b2da3719e6514e971ddb67f7cfc1c64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80636352211e116100ab578063ac3dfc731161006f578063ac3dfc73146103f9578063ae677aa314610415578063b88d4fde14610431578063c87b56dd1461045a578063d96a094a14610497578063e985e9c5146104b35761012a565b80636352211e1461030057806370a082311461033d57806378f04baf1461037a57806395d89b41146103a5578063a22cb465146103d05761012a565b8063202e3740116100f2578063202e37401461022857806323b872dd14610253578063268291551461027c57806342842e0e146102ac57806345f8fa80146102d55761012a565b806301ffc9a71461012f57806306fdde031461016c578063081812fc14610197578063095ea7b3146101d457806312e85585146101fd575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906128c3565b6104f0565b604051610163919061290b565b60405180910390f35b34801561017857600080fd5b506101816105d2565b60405161018e91906129b6565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190612a0e565b610664565b6040516101cb9190612a7c565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612ac3565b6106aa565b005b34801561020957600080fd5b506102126107c1565b60405161021f9190612b12565b60405180910390f35b34801561023457600080fd5b5061023d6107cb565b60405161024a9190612c83565b60405180910390f35b34801561025f57600080fd5b5061027a60048036038101906102759190612ca5565b610ab0565b005b61029660048036038101906102919190612e2d565b610b10565b6040516102a39190612b12565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190612ca5565b610b56565b005b3480156102e157600080fd5b506102ea610b76565b6040516102f79190612c83565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190612a0e565b610e5b565b6040516103349190612a7c565b60405180910390f35b34801561034957600080fd5b50610364600480360381019061035f9190612e89565b610f0c565b6040516103719190612b12565b60405180910390f35b34801561038657600080fd5b5061038f610fc3565b60405161039c9190612c83565b60405180910390f35b3480156103b157600080fd5b506103ba611216565b6040516103c791906129b6565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190612ee2565b6112a8565b005b610413600480360381019061040e9190612f22565b6112be565b005b61042f600480360381019061042a9190612a0e565b6114af565b005b34801561043d57600080fd5b5061045860048036038101906104539190613003565b611540565b005b34801561046657600080fd5b50610481600480360381019061047c9190612a0e565b6115a2565b60405161048e91906129b6565b60405180910390f35b6104b160048036038101906104ac9190612a0e565b6116b4565b005b3480156104bf57600080fd5b506104da60048036038101906104d59190613086565b6118f7565b6040516104e7919061290b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105bb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105cb57506105ca8261198b565b5b9050919050565b6060600080546105e1906130f5565b80601f016020809104026020016040519081016040528092919081815260200182805461060d906130f5565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b5050505050905090565b600061066f826119f5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106b582610e5b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90613198565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610744611a40565b73ffffffffffffffffffffffffffffffffffffffff16148061077357506107728161076d611a40565b6118f7565b5b6107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061322a565b60405180910390fd5b6107bc8383611a48565b505050565b6000600954905090565b60606000600754905060008060005b8381101561087a573373ffffffffffffffffffffffffffffffffffffffff16600b600060018461080a9190613279565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610867576001836108649190613279565b92505b8080610872906132ad565b9150506107da565b5060008267ffffffffffffffff81111561089757610896612d02565b5b6040519080825280602002602001820160405280156108d057816020015b6108bd6127fa565b8152602001906001900390816108b55790505b50905060005b84811015610aa5573373ffffffffffffffffffffffffffffffffffffffff16600b60006001846109069190613279565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a925760006001826109629190613279565b90506000600b60008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050848681518110610a7557610a746132f5565b5b6020026020010181905250600185610a8d9190613279565b945050505b8080610a9d906132ad565b9150506108d6565b508094505050505090565b610ac1610abb611a40565b82611b01565b610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af790613396565b60405180910390fd5b610b0b838383611b96565b505050565b60006001600754610b219190613279565b60078190555060006007549050610b383382611dfc565b610b428185611fd5565b610b4c8184612042565b8091505092915050565b610b7183838360405180602001604052806000815250611540565b505050565b60606000600754905060008060005b83811015610c25573373ffffffffffffffffffffffffffffffffffffffff16600b6000600184610bb59190613279565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610c1257600183610c0f9190613279565b92505b8080610c1d906132ad565b915050610b85565b5060008267ffffffffffffffff811115610c4257610c41612d02565b5b604051908082528060200260200182016040528015610c7b57816020015b610c686127fa565b815260200190600190039081610c605790505b50905060005b84811015610e50573373ffffffffffffffffffffffffffffffffffffffff16600b6000600184610cb19190613279565b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e3d576000600182610d0d9190613279565b90506000600b60008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581525050848681518110610e2057610e1f6132f5565b5b6020026020010181905250600185610e389190613279565b945050505b8080610e48906132ad565b915050610c81565b508094505050505090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa90613402565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390613494565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600060075490506000600854600754610fde91906134b4565b90506000808267ffffffffffffffff811115610ffd57610ffc612d02565b5b60405190808252806020026020018201604052801561103657816020015b6110236127fa565b81526020019060019003908161101b5790505b50905060005b8481101561120b573073ffffffffffffffffffffffffffffffffffffffff16600b600060018461106c9190613279565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111f85760006001826110c89190613279565b90506000600b60008381526020019081526020016000209050806040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250508486815181106111db576111da6132f5565b5b60200260200101819052506001856111f39190613279565b945050505b8080611203906132ad565b91505061103c565b508094505050505090565b606060018054611225906130f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611251906130f5565b801561129e5780601f106112735761010080835404028352916020019161129e565b820191906000526020600020905b81548152906001019060200180831161128157829003601f168201915b5050505050905090565b6112ba6112b3611a40565b8383612233565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600b600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611359576040517f8c02c9f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009543414611394576040517fd17a945f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b600084815260200190815260200160002060040160006101000a81548160ff02191690831515021790555080600b60008481526020019081526020016000206003018190555033600b600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555030600b600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600081548092919061149b906134e8565b91905055506114ab333084611b96565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611536576040517f3938a73800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060098190555050565b61155161154b611a40565b83611b01565b611590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158790613396565b60405180910390fd5b61159c8484848461239f565b50505050565b60606115ad826119f5565b60006006600084815260200190815260200160002080546115cd906130f5565b80601f01602080910402602001604051908101604052809291908181526020018280546115f9906130f5565b80156116465780601f1061161b57610100808354040283529160200191611646565b820191906000526020600020905b81548152906001019060200180831161162957829003601f168201915b5050505050905060006116576123fb565b9050600081510361166c5781925050506116af565b6000825111156116a157808260405160200161168992919061354d565b604051602081830303815290604052925050506116af565b6116aa84612412565b925050505b919050565b6000600b60008381526020019081526020016000206003015490506000600b600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050813414611743576040517fb7793d3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600b600085815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b600085815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600b600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060086000815480929190611830906132ad565b9190505550611840303385611b96565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6009549081150290604051600060405180830381858888f193505050501580156118aa573d6000803e3d6000fd5b508073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156118f1573d6000803e3d6000fd5b50505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6119fe8161247a565b611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3490613402565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611abb83610e5b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611b0d83610e5b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b4f5750611b4e81856118f7565b5b80611b8d57508373ffffffffffffffffffffffffffffffffffffffff16611b7584610664565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611bb682610e5b565b73ffffffffffffffffffffffffffffffffffffffff1614611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c03906135e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7290613675565b60405180910390fd5b611c868383836124e6565b611c91600082611a48565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ce191906134b4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d389190613279565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611df78383836124eb565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e62906136e1565b60405180910390fd5b611e748161247a565b15611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab9061374d565b60405180910390fd5b611ec0600083836124e6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f109190613279565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fd1600083836124eb565b5050565b611fde8261247a565b61201d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612014906137df565b60405180910390fd5b8060066000848152602001908152602001600020908161203d91906139ab565b505050565b6000811161207c576040517fa05bd3b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60095434146120b7576040517fd17a945f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200182815260200160001515815250600b60008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050506121f0333084611b96565b817f996e8605a17a03b804e9be32760ca54c8ff26dfc111d8ee2a0e96806d5e5890633308460006040516122279493929190613a7d565b60405180910390a25050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036122a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229890613b0e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612392919061290b565b60405180910390a3505050565b6123aa848484611b96565b6123b6848484846124f0565b6123f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ec90613ba0565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061241d826119f5565b60006124276123fb565b905060008151116124475760405180602001604052806000815250612472565b8061245184612677565b60405160200161246292919061354d565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006125118473ffffffffffffffffffffffffffffffffffffffff166127d7565b1561266a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261253a611a40565b8786866040518563ffffffff1660e01b815260040161255c9493929190613c15565b6020604051808303816000875af192505050801561259857506040513d601f19601f820116820180604052508101906125959190613c76565b60015b61261a573d80600081146125c8576040519150601f19603f3d011682016040523d82523d6000602084013e6125cd565b606091505b506000815103612612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260990613ba0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061266f565b600190505b949350505050565b6060600082036126be576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506127d2565b600082905060005b600082146126f05780806126d9906132ad565b915050600a826126e99190613cd2565b91506126c6565b60008167ffffffffffffffff81111561270c5761270b612d02565b5b6040519080825280601f01601f19166020018201604052801561273e5781602001600182028036833780820191505090505b5090505b600085146127cb5760018261275791906134b4565b9150600a856127669190613d03565b60306127729190613279565b60f81b818381518110612788576127876132f5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127c49190613cd2565b9450612742565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6128a08161286b565b81146128ab57600080fd5b50565b6000813590506128bd81612897565b92915050565b6000602082840312156128d9576128d8612861565b5b60006128e7848285016128ae565b91505092915050565b60008115159050919050565b612905816128f0565b82525050565b600060208201905061292060008301846128fc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612960578082015181840152602081019050612945565b60008484015250505050565b6000601f19601f8301169050919050565b600061298882612926565b6129928185612931565b93506129a2818560208601612942565b6129ab8161296c565b840191505092915050565b600060208201905081810360008301526129d0818461297d565b905092915050565b6000819050919050565b6129eb816129d8565b81146129f657600080fd5b50565b600081359050612a08816129e2565b92915050565b600060208284031215612a2457612a23612861565b5b6000612a32848285016129f9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a6682612a3b565b9050919050565b612a7681612a5b565b82525050565b6000602082019050612a916000830184612a6d565b92915050565b612aa081612a5b565b8114612aab57600080fd5b50565b600081359050612abd81612a97565b92915050565b60008060408385031215612ada57612ad9612861565b5b6000612ae885828601612aae565b9250506020612af9858286016129f9565b9150509250929050565b612b0c816129d8565b82525050565b6000602082019050612b276000830184612b03565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b62816129d8565b82525050565b6000612b7382612a3b565b9050919050565b612b8381612b68565b82525050565b612b92816128f0565b82525050565b60a082016000820151612bae6000850182612b59565b506020820151612bc16020850182612b7a565b506040820151612bd46040850182612b7a565b506060820151612be76060850182612b59565b506080820151612bfa6080850182612b89565b50505050565b6000612c0c8383612b98565b60a08301905092915050565b6000602082019050919050565b6000612c3082612b2d565b612c3a8185612b38565b9350612c4583612b49565b8060005b83811015612c76578151612c5d8882612c00565b9750612c6883612c18565b925050600181019050612c49565b5085935050505092915050565b60006020820190508181036000830152612c9d8184612c25565b905092915050565b600080600060608486031215612cbe57612cbd612861565b5b6000612ccc86828701612aae565b9350506020612cdd86828701612aae565b9250506040612cee868287016129f9565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d3a8261296c565b810181811067ffffffffffffffff82111715612d5957612d58612d02565b5b80604052505050565b6000612d6c612857565b9050612d788282612d31565b919050565b600067ffffffffffffffff821115612d9857612d97612d02565b5b612da18261296c565b9050602081019050919050565b82818337600083830152505050565b6000612dd0612dcb84612d7d565b612d62565b905082815260208101848484011115612dec57612deb612cfd565b5b612df7848285612dae565b509392505050565b600082601f830112612e1457612e13612cf8565b5b8135612e24848260208601612dbd565b91505092915050565b60008060408385031215612e4457612e43612861565b5b600083013567ffffffffffffffff811115612e6257612e61612866565b5b612e6e85828601612dff565b9250506020612e7f858286016129f9565b9150509250929050565b600060208284031215612e9f57612e9e612861565b5b6000612ead84828501612aae565b91505092915050565b612ebf816128f0565b8114612eca57600080fd5b50565b600081359050612edc81612eb6565b92915050565b60008060408385031215612ef957612ef8612861565b5b6000612f0785828601612aae565b9250506020612f1885828601612ecd565b9150509250929050565b60008060408385031215612f3957612f38612861565b5b6000612f47858286016129f9565b9250506020612f58858286016129f9565b9150509250929050565b600067ffffffffffffffff821115612f7d57612f7c612d02565b5b612f868261296c565b9050602081019050919050565b6000612fa6612fa184612f62565b612d62565b905082815260208101848484011115612fc257612fc1612cfd565b5b612fcd848285612dae565b509392505050565b600082601f830112612fea57612fe9612cf8565b5b8135612ffa848260208601612f93565b91505092915050565b6000806000806080858703121561301d5761301c612861565b5b600061302b87828801612aae565b945050602061303c87828801612aae565b935050604061304d878288016129f9565b925050606085013567ffffffffffffffff81111561306e5761306d612866565b5b61307a87828801612fd5565b91505092959194509250565b6000806040838503121561309d5761309c612861565b5b60006130ab85828601612aae565b92505060206130bc85828601612aae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061310d57607f821691505b6020821081036131205761311f6130c6565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613182602183612931565b915061318d82613126565b604082019050919050565b600060208201905081810360008301526131b181613175565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000613214603e83612931565b915061321f826131b8565b604082019050919050565b6000602082019050818103600083015261324381613207565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613284826129d8565b915061328f836129d8565b92508282019050808211156132a7576132a661324a565b5b92915050565b60006132b8826129d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132ea576132e961324a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613380602e83612931565b915061338b82613324565b604082019050919050565b600060208201905081810360008301526133af81613373565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006133ec601883612931565b91506133f7826133b6565b602082019050919050565b6000602082019050818103600083015261341b816133df565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061347e602983612931565b915061348982613422565b604082019050919050565b600060208201905081810360008301526134ad81613471565b9050919050565b60006134bf826129d8565b91506134ca836129d8565b92508282039050818111156134e2576134e161324a565b5b92915050565b60006134f3826129d8565b9150600082036135065761350561324a565b5b600182039050919050565b600081905092915050565b600061352782612926565b6135318185613511565b9350613541818560208601612942565b80840191505092915050565b6000613559828561351c565b9150613565828461351c565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006135cd602583612931565b91506135d882613571565b604082019050919050565b600060208201905081810360008301526135fc816135c0565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061365f602483612931565b915061366a82613603565b604082019050919050565b6000602082019050818103600083015261368e81613652565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006136cb602083612931565b91506136d682613695565b602082019050919050565b600060208201905081810360008301526136fa816136be565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613737601c83612931565b915061374282613701565b602082019050919050565b600060208201905081810360008301526137668161372a565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006137c9602e83612931565b91506137d48261376d565b604082019050919050565b600060208201905081810360008301526137f8816137bc565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613824565b61386b8683613824565b95508019841693508086168417925050509392505050565b6000819050919050565b60006138a86138a361389e846129d8565b613883565b6129d8565b9050919050565b6000819050919050565b6138c28361388d565b6138d66138ce826138af565b848454613831565b825550505050565b600090565b6138eb6138de565b6138f68184846138b9565b505050565b5b8181101561391a5761390f6000826138e3565b6001810190506138fc565b5050565b601f82111561395f57613930816137ff565b61393984613814565b81016020851015613948578190505b61395c61395485613814565b8301826138fb565b50505b505050565b600082821c905092915050565b600061398260001984600802613964565b1980831691505092915050565b600061399b8383613971565b9150826002028217905092915050565b6139b482612926565b67ffffffffffffffff8111156139cd576139cc612d02565b5b6139d782546130f5565b6139e282828561391e565b600060209050601f831160018114613a155760008415613a03578287015190505b613a0d858261398f565b865550613a75565b601f198416613a23866137ff565b60005b82811015613a4b57848901518255600182019150602085019450602081019050613a26565b86831015613a685784890151613a64601f891682613971565b8355505b6001600288020188555050505b505050505050565b6000608082019050613a926000830187612a6d565b613a9f6020830186612a6d565b613aac6040830185612b03565b613ab960608301846128fc565b95945050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613af8601983612931565b9150613b0382613ac2565b602082019050919050565b60006020820190508181036000830152613b2781613aeb565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613b8a603283612931565b9150613b9582613b2e565b604082019050919050565b60006020820190508181036000830152613bb981613b7d565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613be782613bc0565b613bf18185613bcb565b9350613c01818560208601612942565b613c0a8161296c565b840191505092915050565b6000608082019050613c2a6000830187612a6d565b613c376020830186612a6d565b613c446040830185612b03565b8181036060830152613c568184613bdc565b905095945050505050565b600081519050613c7081612897565b92915050565b600060208284031215613c8c57613c8b612861565b5b6000613c9a84828501613c61565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613cdd826129d8565b9150613ce8836129d8565b925082613cf857613cf7613ca3565b5b828204905092915050565b6000613d0e826129d8565b9150613d19836129d8565b925082613d2957613d28613ca3565b5b82820690509291505056fea2646970667358221220c4fb3d942c1d0f877381d75d61f895a50b2b2da3719e6514e971ddb67f7cfc1c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "buy(uint256)": {
        "params": {
          "nftId": "The Id of the NFT"
        }
      },
      "createNFT(string,uint256)": {
        "params": {
          "price": "The price of the NFT",
          "tokenURI": "The TokenURI of the NFT"
        },
        "returns": {
          "_0": "newNFTId The id of the NFT"
        }
      },
      "fetchItemsListed()": {
        "returns": {
          "_0": "All the items a user has listed"
        }
      },
      "fetchMyNFTs()": {
        "returns": {
          "_0": "Returns all the items that a user has purchased"
        }
      },
      "fetchNFTs()": {
        "returns": {
          "_0": "All the unsold market items"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getListingPrice()": {
        "returns": {
          "_0": "listingPrice The listing price"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "resellNFT(uint256,uint256)": {
        "params": {
          "nftId": "The Id of the NFT ",
          "price": "The new Price of the NFT"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateListingPrice(uint256)": {
        "params": {
          "_listingPrice": "The new listing price"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buy(uint256)": {
        "notice": "Allows a user to buy an NFT that is on the Marketplace"
      },
      "createNFT(string,uint256)": {
        "notice": "Mints a NFT and lists it in the marketplace "
      },
      "fetchItemsListed()": {
        "notice": "Returns only items a user has listed "
      },
      "fetchMyNFTs()": {
        "notice": "Returns only items that a user has purchased"
      },
      "fetchNFTs()": {
        "notice": "Returns all unsold market items, all the items that are currently beeing sold"
      },
      "getListingPrice()": {
        "notice": "Returns the listing price of the contract "
      },
      "resellNFT(uint256,uint256)": {
        "notice": "Allows someone to resell a NFT they have purchased"
      },
      "updateListingPrice(uint256)": {
        "notice": "Updates the listing price of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1013,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1749,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_nftIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1751,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_nftsSold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1754,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "listingPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1756,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address_payable"
      },
      {
        "astId": 1761,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "idToNFT",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(NFT)1772_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(NFT)1772_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketplace.NFT)",
        "numberOfBytes": "32",
        "value": "t_struct(NFT)1772_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NFT)1772_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.NFT",
        "members": [
          {
            "astId": 1763,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "nftId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1765,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 1767,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 1769,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1771,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}